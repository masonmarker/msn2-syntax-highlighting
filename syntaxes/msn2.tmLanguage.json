{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "msn2",
    "patterns": [
        {
            "include": "#keywords"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#comments"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#functions"
        },
        {
            "include": "#variables"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#python-scripts"
        },
        {
            "include": "#msn2-fallback"
        },
        {
            "include": "#html"
        }
    ],
    "repository": {
        "main": {
            "patterns": [
                {
                    "include": "#comments"
                },
                {
                    "include": "#keywords"
                },
                {
                    "include": "#strings"
                },
                {
                    "include": "#numbers"
                },
                {
                    "include": "#functions"
                },
                {
                    "include": "#variables"
                },
                {
                    "include": "#operators"
                },
                {
                    "include": "#python-scripts"
                },
                {
                    "include": "#msn2-fallback"
                },
                {
                    "include": "#html"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.msn2",
                    "match": "\\b(macro|postmacro|syntax|enclosedsyntax|class|if|while|for|def|function|import|assert|not|and|or|in|const|let|var|with|wait|threadpool|thread|proc|join|settings|locals|globals)\\b"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.msn2",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.msn2",
                            "match": "\\\\[abfnrtv'\"\\\\]"
                        }
                    ]
                },
                {
                    "name": "string.quoted.single.msn2",
                    "begin": "'",
                    "end": "'",
                    "patterns": [
                        {
                            "name": "constant.character.escape.msn2",
                            "match": "\\\\[abfnrtv'\"\\\\]"
                        }
                    ]
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.msn2",
                    "match": "\\b(\\d+|True|False|None)\\b|\\b0x[0-9a-fA-F]+\\b|\\b0b[01]+\\b"
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "name": "meta.function-call.longstring.msn2",
                    "begin": "\\b(longstring|ls)\\s*\\(",
                    "beginCaptures": {
                        "0": {
                            "name": "entity.name.function.longstring.msn2"
                        }
                    },
                    "end": "\\)",
                    "patterns": [
                        {
                            "include": "#comments",
                            "comment": "Highlight comments inside ls() or longstring() calls."
                        },
                        {
                            "name": "entity.name.function.msn2",
                            "match": "< >|<nl>|<rp>|<lp>|<or>|<rb>|<lb>|<rcb>|<lcb>|<gt>|<lt>|<dnl>",
                            "comment": "Highlight tags like <nl> throughout the entire ls() call."
                        },
                        {
                            "name": "string.quoted.triple.longstring.msn2",
                            "match": "[<>]"
                        },
                        {
                            "name": "string.quoted.triple.longstring.msn2",
                            "match": "[^\\{\\)\\(<>]+"
                        },
                        {
                            "name": "meta.expression",
                            "begin": "\\{=",
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.insertion.begin.msn2"
                                }
                            },
                            "end": "=\\}",
                            "endCaptures": {
                                "0": {
                                    "name": "punctuation.definition.insertion.end.msn2"
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#comments",
                                    "comment": "Highlight comments inside {==} inserts."
                                },
                                {
                                    "include": "$self"
                                }
                            ]
                        },
                        {
                            "include": "$self",
                            "comment": "Apply main grammar rules inside ls() function calls."
                        }
                    ]
                },
                {
                    "name": "meta.function-call.script.msn2",
                    "begin": "\\b(script|async|HTML)\\s*\\(",
                    "beginCaptures": {
                        "0": {
                            "name": "entity.name.function.script.msn2"
                        }
                    },
                    "end": "\\)",
                    "patterns": [
                        {
                            "include": "#comments",
                            "comment": "Highlight comments inside script, async, or HTML function calls."
                        },
                        {
                            "name": "meta.expression",
                            "begin": "\\{=",
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.insertion.begin.msn2"
                                }
                            },
                            "end": "=\\}",
                            "endCaptures": {
                                "0": {
                                    "name": "punctuation.definition.insertion.end.msn2"
                                }
                            },
                            "patterns": [
                                {
                                    "include": "#comments",
                                    "comment": "Highlight comments inside {==} inserts."
                                },
                                {
                                    "include": "$self"
                                }
                            ]
                        },
                        {
                            "include": "$self",
                            "comment": "Apply general grammar rules inside the parentheses of script, async, HTML functions."
                        }
                    ],
                    "comment": "Handle script, async, HTML function calls, allowing {==} inserts but also parsing other content within the parentheses."
                },
                {
                    "name": "entity.name.function.msn2",
                    "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\("
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.msn2",
                    "match": "#.*$",
                    "comment": "Match single-line comments starting with #."
                }
            ]
        },
        "other": {
            "patterns": [
                {
                    "name": "entity.name.class",
                    "match": "[^\\w\\s]+"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.msn2",
                    "match": "\\b(and|or|not|in|is|==|!=|<=|>=|<|>|\\+|-|\\*|/|//|%|\\*\\*|&|\\||\\^|~|>>|<<)\\b"
                }
            ]
        },
        "variables": {
            "patterns": [
                {
                    "name": "variable.other.msn2",
                    "match": "@\\s*([a-zA-Z_][a-zA-Z0-9_]*)|\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b"
                }
            ]
        },
        "python-scripts": {
            "patterns": [
                {
                    "name": "entity.other.attribute-name",
                    "match": "\\\\"
                }
            ]
        },
        "msn2-fallback": {
            "patterns": [
                {
                    "name": "support.type.property-name.css",
                    "match": "%|<2>"
                }
            ]
        },
        "html": {
            "patterns": [
                {
                    "name": "meta.tag.html",
                    "begin": "(</?)\\s*([a-zA-Z][a-zA-Z0-9-]*)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.tag.begin.html"
                        },
                        "2": {
                            "name": "entity.name.tag.html"
                        }
                    },
                    "end": "(/?>)",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.tag.end.html"
                        }
                    },
                    "patterns": [
                        {
                            "name": "meta.attribute.html",
                            "match": "\\b([a-zA-Z-:]+)(=)\"[^\"]*\"",
                            "captures": {
                                "1": {
                                    "name": "entity.other.attribute-name.html"
                                },
                                "2": {
                                    "name": "punctuation.separator.key-value.html"
                                },
                                "3": {
                                    "name": "string.quoted.double.html"
                                }
                            }
                        },
                        {
                            "name": "meta.attribute.html",
                            "match": "\\b([a-zA-Z-:]+)(=)'[^']*'",
                            "captures": {
                                "1": {
                                    "name": "entity.other.attribute-name.html"
                                },
                                "2": {
                                    "name": "punctuation.separator.key-value.html"
                                },
                                "3": {
                                    "name": "string.quoted.single.html"
                                }
                            }
                        }
                    ]
                }
            ]
        }
    },
    "scopeName": "source.msn2"
}
